// Alternate firmware to display a watchface, with the option
// to go to sleep to save power while retaining the RTC time.

// Keep track of how long we've been idle (no touch events)
// to decide when to shutdown
uint32_t idle_ticks = 0;

// Keep track of how many more ticks to lockout button presses
// to avoid rapidly pressing the same button
uint32_t latency_ticks = 0;

extern const uint16_t oshw32[];
extern const uint16_t oshw16[];

void setup() {
  // Run standard startup procedure
  standardStartup();
  
  // Enable STOP mode with everything but the RTC disabled.
  CPU.setLowPowerMode(MODE_WATCH);
  
  // Allow the power button to wake us up from stop mode
  CPU.enableWakeSource(POWER_BUTTON);
  
  // Allow plugging into USB power to wake us up
  CPU.enableWakeSource(USB_POWER);
  
  // Init display
  OLED.begin();
  OLED.fillScreen(0x0000);
  OLED.setTextColor(0xFFFF, 0x0000);
  OLED.setTextSize(1);
  
  //OLED.drawSprite(10,10,32,32,(void*)oshw32);
  //OLED.drawRoundRect(8,8,36,36,2, 0xFFFF);
  
  OLED.drawSprite(120-16-2,120-16-2,16,16,(void*)oshw16);
  OLED.drawRoundRect(120-16-4,120-16-4,20,20,2, 0xFFFF);
  
  // Init stuff, show status
  Battery.begin();
  Battery.enableCharging();
  Touch.begin();
  Movement.begin();

  DateTime.begin();
  if(!DateTime.isRunning()) {
    // RTC has lost power, we need to set a new time
    DateTime.setDateTime(14, 1, 1, 1, 0, 0, 00);
  }
  
  idle_ticks = 0;
  latency_ticks = 0;
}

// Shutdown all of the application code and enter STOP mode,
// but keep the RTC running and reboot when the power button
// is pressed again
void softShutdown(bool notify=false) {
  // Turn off everything
  OLED.shutdown();
  Touch.shutdown();
  Movement.shutdown();
  if (notify) {
    // Buzz twice to indicate soft shutdown
    digitalWrite(BUZZER, HIGH);
    delay(125);
    digitalWrite(BUZZER, LOW);
    delay(125);
    digitalWrite(BUZZER, HIGH);
    delay(125);
    digitalWrite(BUZZER, LOW);
  }
  // Don't turn off until button is released
  while(digitalRead(BUTTON));

  CPU.clearEvents();
  
  // enter STOP mode until the power button is pressed
  CPU.waitForEvent();

  // Exited STOP mode - reboot
  CPU.reboot();
}

void loop() {
  char text[32];

  const uint8_t size = 3;
  const uint8_t height = 7;

  digitalWrite(&PIN_PB1, Battery.canCharge());
  
  if (latency_ticks > 0) {
    latency_ticks--;
  }
  
  // Clock
  OLED.setCursor(8, 64-height*size/2);
  OLED.setTextSize(size);
  DateTime.update();
  uint8_t hour = DateTime.hour();
  bool PM = false;
  if (hour > 12) {
    PM = true;
    hour -= 12;
  } else if (hour == 12) {
    PM = true;
  } else if (hour == 0) {
    hour = 12;
  }
  
  sprintf(text, "%2u:%02u", hour, DateTime.minute());
  OLED.println(text);
  
  OLED.setTextSize(1);
  OLED.setCursor(104, 64-height*size/2);
  sprintf(text, "%02u", DateTime.second());
  OLED.println(text);
  
  OLED.setCursor(104, 64+height*size/2-height);
  if (PM) {
    OLED.println("PM");
  } else {
    OLED.println("AM");
  }

  /*
  OLED.setCursor(88, 112);
  // Battery level as volts
  sprintf(text, "%.2fV", ((float)Battery.readMilliVolts()) / 1000.0);
  OLED.println(text);
  */
  
  // TODO: buttons, allowRepeat, latency
  // widget draw/draw-dirty/clear methods
  // Hold for hard-power-off (3 seconds)
  
  bool isTouched = false;
  if(Touch.read()) {
    if(Touch.isTouched()) {
      isTouched = true;
      // Only check for a button press if the latency timer
      // has expired
      if (latency_ticks == 0) {
        int8_t x = Touch.getX();
        int8_t y = Touch.getY();
        // Test if menu key is being pressed
        if (x >=80 && y >= 80) {
          digitalWrite(BUZZER, HIGH);
          delay(50);
          digitalWrite(BUZZER, LOW);
          latency_ticks = 5;
        }
      }
    }
  }
  
  // Keep track of how long since the last touch event
  if (isTouched) {
    idle_ticks = 0;
  } else {
    idle_ticks++;
  }
  
  // Don't bother trying to enter a soft-shutdown when USB
  // power is connected.
  if (digitalRead(&PIN_PA9)) {
    idle_ticks = 0;
  }
  
  // Sleep after ~30 seconds of inactivity
  if (idle_ticks >= 10 * 30) {
    softShutdown();
  }

  // Delay in low speed mode
  CPU.setSpeed(CPU_LS);
  delay(100);
  CPU.setSpeed(CPU_HS);

  // Shut down if button is pressed
  if(digitalRead(BUTTON)) {
    uint32_t start = millis();
    CPU.setSpeed(CPU_LS);
    
    uint32_t stop = millis();
    uint32_t delta = stop - start;
    if (stop < start) {
      delta = (0xFFFFFFFF - start) + stop;
    }
    while (digitalRead(BUTTON)) {
      delay(50);
      stop = millis();
      delta = stop - start;
      if (stop < start) {
        delta = (0xFFFFFFFF - start) + stop;
      }
      
      if (delta >= 3000) {
        break;
      }
    }
    
    CPU.setSpeed(CPU_HS);
    
    
    if (delta < 3000) {
      softShutdown();
    } else {
      standardShutdown();
    }
  }
}

// 16x16
/*
const uint16_t oshw_icon[] = {
  0x0000, 0x0000, 0x0861, 0x2965, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2965, 0x0861, 0x0000, 0x0000,
  0x0000, 0x0861, 0xD69A, 0xFFFF, 0x8C51, 0x73AE, 0x0000, 0x0000, 0x0000, 0x0000, 0x73AE, 0x8C51, 0xFFFF, 0xD69A, 0x0861, 0x0000,
  0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2945, 0x0000, 0x0000, 0x2945, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2965, 0x0000,
  0x0000, 0x0000, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CF3, 0x0000, 0x0000, 0x9CF3, 0xFFFF, 0xFFFF, 0xFFFF, 0x8C51, 0x0000, 0x0000,
  0x0000, 0x0000, 0x8430, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0020, 0x0020, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0x8430, 0x0000, 0x0000,
  0x3186, 0x630C, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0x738E, 0x0000, 0x0000, 0x738E, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0x630C, 0x3186,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0x0000, 0x0000, 0x0000, 0x0000, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x0841, 0x0000, 0x0000, 0x0841, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0x3186, 0x5AEB, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0x8C51, 0x0841, 0x0841, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x5AEB, 0x3186,
  0x0000, 0x0000, 0x738E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x738E, 0x0000, 0x0000,
  0x0000, 0x0000, 0x8C51, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8C51, 0x0000, 0x0000,
  0x0000, 0x2965, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2965, 0x0000,
  0x0000, 0x0861, 0xD69A, 0xFFFF, 0x8C51, 0x6B4D, 0xE73C, 0xFFFF, 0xFFFF, 0xE73C, 0x6B4D, 0x8C51, 0xFFFF, 0xD69A, 0x0861, 0x0000,
  0x0000, 0x0000, 0x0861, 0x2965, 0x0000, 0x0000, 0x630C, 0xFFFF, 0xFFFF, 0x630C, 0x0000, 0x0000, 0x2965, 0x0861, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0xFFFF, 0xFFFF, 0x3186, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
};
*/
const uint16_t oshw32[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0xA514, 0x10A2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0xA514, 0x3186, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0xEF7D, 0xFFFF, 0xEF5D, 0x528A, 0x0000, 0x1082, 0x2104, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2104, 0x1082, 0x0000, 0x528A, 0xEF5D, 0xFFFF, 0xEF7D, 0x3186, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x3186, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDD7, 0xF79E, 0xBDD7, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xF79E, 0xBDD7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x3186, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0xA514, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2124, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2124, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x10A2, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8C71, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8C71, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x10A2, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x528A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x528A, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB596, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x0000, 0x5AEB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB596, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xCE79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE59, 0x0000, 0x0000, 0x0000, 0x0000, 0xCE59, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x31A6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2104, 0x0000, 0x0000, 0x2104, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x31A6, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x9CF3, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5ACB, 0x0000, 0x0000, 0x0000, 0x0000, 0x5ACB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CF3, 0x0000, 0x0000, 0x0000, 0x0000,
  0x4228, 0x7BCF, 0xAD55, 0xDEDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x632C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDB, 0xAD55, 0x7BCF, 0x4228,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA534, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA514, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xDEDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0x4228, 0x7BEF, 0xAD55, 0xDEDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B4D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x6B4D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEDB, 0xAD75, 0x7BEF, 0x4228,
  0x0000, 0x0000, 0x0000, 0x0000, 0x8430, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0x6B6D, 0x0000, 0x0000, 0x0000, 0x0000, 0x6B6D, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8430, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x18C3, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0xAD55, 0xAD55, 0xDEFB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0x18C3, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xAD55, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAD55, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA534, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x4A69, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x4A69, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x10A2, 0xEF5D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF5D, 0x10A2, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0xA514, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA514, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x3186, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA534, 0x9492, 0xF79E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0x9492, 0xA534, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x3186, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0xEF7D, 0xFFFF, 0xEF5D, 0x528A, 0x0000, 0x0000, 0x0841, 0x6B4D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B4D, 0x0841, 0x0000, 0x0000, 0x528A, 0xEF5D, 0xFFFF, 0xEF7D, 0x3186, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3186, 0xA514, 0x10A2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xDEFB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0xA514, 0x3186, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xAD75, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAD75, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7BEF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x7BEF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4228, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x4228, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
};

const uint16_t oshw16[] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x4208, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0xDEFB, 0xFFFF, 0x0841, 0xEF7D, 0x39C7, 0x0000, 0x0000, 0x39C7, 0xEF7D, 0x0841, 0xFFFF, 0xDEFB, 0x0000, 0x0000,
  0x0000, 0x4208, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8410, 0x0000, 0x0000, 0x8410, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x4208, 0x0000,
  0x0000, 0x0000, 0x6B4D, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x0000, 0x0000, 0xCE79, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B4D, 0x0000, 0x0000,
  0x0000, 0x0000, 0xCE79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x0000, 0x0000,
  0x7BEF, 0x6B6D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x0000, 0x0000, 0xDEFB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B6D, 0x7BEF,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
  0x7BEF, 0x6B6D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x0000, 0x0000, 0xDEFB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B6D, 0x7BEF,
  0x0000, 0x0000, 0xCE79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x0000, 0x0000,
  0x0000, 0x0000, 0x6B4D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6B4D, 0x0000, 0x0000,
  0x0000, 0x4208, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x4208, 0x0000,
  0x0000, 0x0000, 0xDEFB, 0xFFFF, 0x632C, 0xCE79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x632C, 0xFFFF, 0xDEFB, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x4208, 0x0000, 0x0000, 0x738E, 0xFFFF, 0xFFFF, 0x738E, 0x0000, 0x0000, 0x4208, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8410, 0xFFFF, 0xFFFF, 0x8410, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
};